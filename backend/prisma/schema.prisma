// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole{
  ADMIN
  USER
}
enum Difficulty{
  EASY 
  MEDIUM
  HIGH
}
model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  image     String?
  role UserRole @default(USER)
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
  problems Problem[]
  submissions Submission[]
  problemSolved ProblemSolved[]
  }

model Problem {
  id String @id @default(uuid())
  title String
  description String
  difficulty Difficulty
  tag String[]
  userId String
  examples Json
  constraints String
  hints String?
  editorial String?
  testcases Json
  codeSnippets Json
  referenceSolutions Json
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt 

  user User @relation( fields: [userId],references: [id],onDelete: Cascade)
  submission Submission[]
  SolvedBy ProblemSolved[]

  }
  
  
model Submission{
  id String @id @default(uuid())
  userId String
  problemId String
  souceCode Json
  language String
  stdin String?
  stdout String?
  stderr String?
  compiledOutput String?
  status String
  memory String?
  time String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete:Cascade)  
testcases TestCaseResult[]
  
}  
model TestCaseResult {
  id String @id @default(uuid())
  submissionId String
  testcase  Int
  passed Boolean
  stdout String?
  expectedOutput String?
  stderr String?
  compiledOutput String?
  status String
  memory String?
  time String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  @@index([submissionId])  
}
model ProblemSolved{
  id String @id @default(uuid())
  userId String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  @@unique([userId, problemId])
  
}